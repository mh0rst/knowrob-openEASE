# openEASE docker-compose file

# Doof: Bauen von Knowrob-container geht hier nicht
# Doof: Warten auf Postgres würde eigenes Skript in webapp/container erfordern
# Doof wegen legacy: Docker-compose verträgt sich nicht mit hardcodierten Containernamen
# TODO Hardcodierte Containernamen -> Services
# TODO data_containers/volumes_from -> volumes
# TODO links -> networks 
# TODO Use version 3
version: "2.1"

services:

  user_data:
    build: ./user_data
    container_name: user_data
    image: knowrob/user_data
    command: 'true'

  mesh_data:
    container_name: mesh_data
    image: ubuntu
    volumes:
      - /home/ros/mesh_data
    command: chmod -R ugo+rw /home/ros/mesh_data

  mongo_data:
    container_name: mongo_data
    image: busybox
    volumes:
      - /data/db
    command: 'true'

  mongo_db:
    container_name: mongo_db
    image: mongo
    volumes_from:
      - mongo_data

  lft_data:
    container_name: lft_data
    image: busybox
    volumes:
      - /tmp/openEASE/dockerbridge
    command: 'true'

  episode_data:
    container_name: episode_data
    image: busybox
    volumes:
      - $OPENEASE_EPISODE_DATA:/episodes
    command: 'true'

  nginx:
    container_name: nginx
    image: nginx
    volumes:
      - /etc/nginx
      - ./nginx-proxy/certs:/etc/nginx/certs
    ports:
      - "80:80"
      - "443:443"

  docker-gen:
    container_name: docker-gen
    image: jwilder/docker-gen
    volumes_from:
      - nginx
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
      - /nginx-proxy:/etc/docker-gen/templates
    command: -notify-sighup nginx -watch -only-published /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf

  postgres_data:
    container_name: postgres_data
    image: knowrob/user_db
    volumes:
      - /var/lib/postgresql/data
    command: 'true'

  postgres_db:
    container_name: postgres_db
    image: knowrob/postgres
    environment:
      POSTGRES_USER: docker
    volumes_from:
      - postgres_data

  dockerbridge:
    build: ./dockerbridge
    container_name: dockerbridge
    image: knowrob/dockerbridge
    environment:
      EASE_DEBUG: ${EASE_DEBUG:-false}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    dns: ${DNS:-8.8.8.8}

  ease_secret:
    container_name: ease_secret
    image: busybox
    volumes:
      - /etc/ease_secret
    command: sh -c '< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c 64 > /etc/ease_secret/secret'

  flask:
    build: ./flask
    container_name: flask
    image: openease/flask
    environment:
      VIRTUAL_HOST: flask
      VIRTUAL_PORT: 5000
      EASE_DEBUG: ${EASE_DEBUG:-false}
      OPENEASE_ADMIN_PASSWORD: $OPENEASE_ADMIN_PASSWORD
      OPENEASE_MAIL_USERNAME: $OPENEASE_MAIL_USERNAME
      OPENEASE_MAIL_PASSWORD: $OPENEASE_MAIL_PASSWORD
      OPENEASE_MESHES: $OPENEASE_MESHES
      OPENEASE_ROS_DISTRIBUTION: ${OPENEASE_ROS_DISTRIBUTION:-indigo}
      GITHUB_APP_ID: $GITHUB_APP_ID
      GITHUB_APP_SECRET: $GITHUB_APP_SECRET
      FACEBOOK_APP_SECRET: $FACEBOOK_APP_SECRET
      FACEBOOK_APP_ID: $FACEBOOK_APP_ID
      TWITTER_APP_ID: $TWITTER_APP_ID
      TWITTER_APP_SECRET: $TWITTER_APP_SECRET
      GOOGLE_APP_SECRET: $GOOGLE_APP_SECRET
      GOOGLE_APP_ID: $GOOGLE_APP_ID
    volumes_from:
      - mesh_data
      - ease_secret:ro
      - user_data
      - episode_data
      - lft_data
    links:
      - "postgres_db:postgres"
      - "dockerbridge:dockerbridge"
      - "mongo_db:mongo"
    ports:
      - "127.0.0.1:${KNOWROB_WEB_PORT:-5000}:5000"
    dns: ${DNS:-8.8.8.8}
    stdin_open: true
    command: python runserver.py